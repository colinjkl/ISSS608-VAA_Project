---
title: "Dengue Forecast in Singapore"
author: "Colin Jiang Kelin"
date: " 17, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  message: false
  warning: false
editor: visual
---

```{r}
pacman::p_load(
  tidyverse,
  fable,
  tsibble,
  feasts,
  patchwork,
  plotly,
  ggstatsplot
)
```

# Data Import

```{r}
df <- read_csv("data/dengue_climate_joined_by_week_transformed.csv")
```

# Data Wrangling

```{r}
df$Date <- lubridate::ymd(lubridate::parse_date_time(paste(df$Year, df$WkNo, 1, sep="/"),'Y/W/w'))
```

```{r}
df2 <- df

for (i in 1:4) {
  for (n in colnames(df)) {
    if (n %in% c("Year", "WkNo", "Date")) {
      next
    } else {
      df2[paste0("diff",i,"_",n)] <- difference(df[n][[1]],i)
    }
  }
}
```

```{r}
write_csv(df2, "data/dengue_climate_joined_by_week_transformed_diff.csv")
```

# Univariate

## ARIMA

### Data Preparation

```{r}
arima_ts <-  df %>% dplyr::select(Date, Cases)
arima_tbl <- arima_ts %>% as_tsibble(index = Date) %>% fill_gaps(.full = TRUE) %>% fill(Cases)
```

```{r}
start_date <- arima_tbl$Date[34]
```

```{r}
arima_sliced <- arima_tbl %>% dplyr::filter(Date > "2020-01-01" &
                                              Date < "2020-10-01" )
```

```{r}
round(0.5*nrow(arima_sliced))
```

### Model

```{r}
arima_mdl <- arima_tbl %>% 
  model(ARIMA(Cases))
```

```{r}
arima_mdl %>% gg_tsresiduals()
```

### Autocorrelation

```{r}
arima_tbl %>% gg_tsdisplay(difference(Cases,1), plot_type = 'partial')
```

### Actual vs Predicted

```{r}
arima_fitted <- fitted(arima_mdl)[,2:3] %>% 
  as_tibble() %>% 
  rename(Cases=.fitted)

arima_fitted$Type <- "Fit"

arima_tbl$Type <- "Observed"

arima_avp <- dplyr::bind_rows(arima_fitted, arima_tbl)

ggplotly(
  ggplot(data = arima_avp) +
    geom_line(aes(x = Date, y = Cases, colour = Type)) +
    ggtitle("Observed vs Fitted")
)
```

### Model Metrics

```{r}

arima_cv <- arima_tbl %>%
  stretch_tsibble(.init = 200, .step = 10) 


arima_cv_metrics <- arima_cv %>%
  model(ARIMA(Cases)) %>%
  forecast(h = 1) %>%
  accuracy(arima_tbl)


arima_train_metrics <- arima_mdl %>%
  accuracy()
```

```{r}
arima_cv_metrics[c("RMSE","MAE","MAPE")]
```

### Forecast

```{r}
arima_mdl %>%
  forecast(h = 26) %>%
  autoplot(arima_tbl)
```

```{r}
results <- arima_mdl %>%
  forecast(h = 26)

results <- results[-c(1,3)]
colnames(results) <- c("Date", "Forecast")

results
```

## Exponential Smoothing

### Data Preparation

```{r}
ets_ts <-  df %>% dplyr::select(Date, Cases)
ets_tbl <- ets_ts %>% as_tsibble(index = Date) %>% fill_gaps(.full = TRUE) %>% fill(Cases)
```

### Model

```{r}
ets_mdl <- ets_tbl %>%
  model(ETS(Cases))

report(ets_mdl)
```

```{r}
ets_mdl <- ets_tbl %>%
  model(ETS(Cases))

report(ets_mdl)

ets_mdl %>%
  forecast(h = 26) %>%
  autoplot(ets_tbl)
```

```{r}
a <- capture.output(report(ets_mdl))
c <- ""
for (b in a) {
  c <- paste0(c,b,"\n")
}
cat(c)
```

### Decomposition

```{r}
components(ets_mdl) %>%
  autoplot() +
  labs(title = "Exponential Smoothing Components")
```

```{r}
autoplot(ets_tbl)
```

### Actual vs Predicted

```{r}
ets_fitted <- fitted(ets_mdl)[,2:3] %>% 
  as_tibble() %>% 
  rename(Cases=.fitted)

ets_fitted$Type <- "Fit"

ets_tbl$Type <- "Observed"

ets_avp <- dplyr::bind_rows(ets_fitted, ets_tbl)

ggplotly(
  ggplot(data = ets_avp) +
    geom_line(aes(x = Date, y = Cases, colour = Type)) +
    ggtitle("Observed vs Fitted")
)
```

### Model Metrics

```{r}
ets_cv <- ets_tbl %>%
  stretch_tsibble(.init = 200, .step = 10) 


ets_cv_metrics <- ets_cv %>%
  model(ARIMA(Cases)) %>%
  forecast(h = 1) %>%
  accuracy(ets_tbl)


ets_train_metrics <- ets_mdl %>%
  accuracy()
```

```{r}
ets_cv_metrics$MAPE
```

### Forecast

```{r}
ets_mdl %>%
  forecast(h = 26) %>%
  autoplot(ets_tbl)
```

## VAR

### Data Preparation

```{r}
var_ts <-  df %>% dplyr::select(-c("Year", "WkNo"))
var_tbl <- var_ts %>% as_tsibble(index = Date) %>% fill_gaps(.full = TRUE) %>% fill(colnames(var_ts))
```

### Model

```{r}
var_mdl <- var_tbl %>%
  model(
    aicc = VAR(vars(Cases, avg_mean_temp, avg_daily_rainfall), ic="aicc")
  )
```

```{r}
i <- c("avg_temp")
```

```{r}
v <- "Cases"
mode <- '"aicc"'

for (s in i) {
  v <- paste0(v,",",s)
}

strr <- paste0('var_tbl %>% model(',mode,' = VAR(vars(',v,'), ic=',mode,'))')

var_mdl <- eval(parse(text = strr))
```

### Autocorrelation

```{r}
var_mdl |>
  augment() |>
  ACF() |>
  autoplot()
```

### Actual vs Predicted

```{r}
var_fitted <- fitted(var_mdl)[,2:3] %>% 
  as_tibble() #%>% 
  #rename(Cases=.fitted)

var_fitted$Type <- "Fit"

var_tbl$Type <- "Observed"

var_avp <- dplyr::bind_rows(var_fitted, var_tbl)

ggplotly(
  ggplot(data = var_avp) +
    geom_line(aes(x = Date, y = Cases, colour = Type)) +
    ggtitle("Observed vs Fitted")
)
```

### Model Metrics

```{r}
var_cv <- var_tbl %>%
  stretch_tsibble(.init = 200, .step = 10) 


var_cv_metrics <- var_cv %>%
  model(
    aicc = VAR(vars(Cases))
    ) %>%
  forecast(h = 1) %>%
  accuracy(var_tbl)
```

```{r}
var_cv_metrics
```

### Forecast

```{r}

fc <- var_mdl %>% 
  forecast(h = 26)

fc %>% autoplot(var_tbl)
```

```{r}
v <- "avg_rainfall"

var_fc <- data.frame(Date=fc$Date, 
                     temp=fc$.mean[,v],
                     lwr80=ci$`80%`[[v]]$lower,
                     upr80=ci$`80%`[[v]]$upper,
                     lwr95=ci$`95%`[[v]]$lower,
                     upr95=ci$`95%`[[v]]$upper,
                     Type="Forecast")

colnames(var_fc)[2] <- v

var_obs <- data.frame(Date=var_tbl$Date, 
                      temp=var_tbl[v],
                      lwr80=NA,
                      upr80=NA,
                      lwr95=NA,
                      upr95=NA,
                      Type="Observed")

var_plot <- dplyr::bind_rows(var_obs, var_fc)
```

```{r}
ci <- hilo(fc)

ci$`80%`[[v]]$lower
```

```{r}


ggplot(data = var_plot, aes(x=Date, y=.data[[v]] ,colour=Type)) + 
  geom_line() +
  geom_ribbon(aes(ymin=lwr80, ymax=upr80), alpha=0.2, linetype=0, fill="blue") +
  geom_ribbon(aes(ymin=lwr95, ymax=upr95), alpha=0.1, linetype=0, fill="blue") + 
  scale_colour_manual(values = c("Observed"="black", "Forecast"="blue")) +
  ggtitle(paste0("Forecast ",v," for next n periods"))
```

```{r}
ggcoefstats(var_mdl %>% broom::tidy())
```

```{r}
var_mdl <- var_tbl %>%
  model(
    aicc = VAR(vars(Cases), ic="aicc")
  )

fc <- var_mdl %>% 
  forecast(h = 26)

fc$.mean
```
