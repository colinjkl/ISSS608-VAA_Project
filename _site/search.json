[
  {
    "objectID": "Shinyapp/Shinyapp.html",
    "href": "Shinyapp/Shinyapp.html",
    "title": "Shinyapp",
    "section": "",
    "text": "Click here to access R Shiny Application\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Poster/Poster.html",
    "href": "Poster/Poster.html",
    "title": "Project Poster",
    "section": "",
    "text": "Click here to view the original poster\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Proposal/Proposal.html#eda",
    "href": "Proposal/Proposal.html#eda",
    "title": "Project Proposal",
    "section": "EDA",
    "text": "EDA\nWe will be using data visualizations to explore trends in our weather and temperature for the past few decades"
  },
  {
    "objectID": "Proposal/Proposal.html#forecast",
    "href": "Proposal/Proposal.html#forecast",
    "title": "Project Proposal",
    "section": "Forecast",
    "text": "Forecast\nIn the forecast tab, users will be able to run models to predict temp/rain/wind changes.\nHere, the users will be able to choose from a selection of the models mentioned in the previous section, and define the parameters associated with that model before running the model.\n\n\n\n\n\nFinally, we will include a tab for CDA to evaluate the performance of the trained model."
  },
  {
    "objectID": "Proposal/Proposal.html#cda",
    "href": "Proposal/Proposal.html#cda",
    "title": "Project Proposal",
    "section": "CDA",
    "text": "CDA\nWe will be using CDA to evalute our predictions via significance, sensitivity analysis, and confidence."
  },
  {
    "objectID": "Proposal/Proposal.html#dashboard",
    "href": "Proposal/Proposal.html#dashboard",
    "title": "Project Proposal",
    "section": "Dashboard",
    "text": "Dashboard\n\nOverall\nThe dashboard layout is further divided into 3 (or 4) sections; Temperature, Rainfall, Wind (and relative humidity, which may be a composite factor of temperature and rain).\nWe intend for users to be able to filter by multiple levels as indicated below:\n\nBy time period – slider bar\nBy min/max/mean – checkbox (only choose 1)\nBy day/month/year - checkbox (only choose 1)\n\nIf time permit, we will add animations to the map which shows the gradual change in temp/rain/wind over time across the different regions.\n\n\n\n\n\n\n\nTrend\nTo give users a clearer view of changes over time, the Trend tab utilizes a parallel coordinate map that shows temp/rain/wind against time. Here, each line (and color) represents a different weather station. We can also added the vertical histograms that shows the distribution as well as the outliers.\n\n\n\n\n\n\n\nClimate Impact\nIn this section, the users will be able to visualize the correlation between temp/rain and dengue cases. Those who are in the public health sector can make use of this information to develop better strategies to prevent dengue outbreak."
  },
  {
    "objectID": "Proposal/Proposal.html#forecast-1",
    "href": "Proposal/Proposal.html#forecast-1",
    "title": "Project Proposal",
    "section": "Forecast",
    "text": "Forecast\nIn the forecast tab, users will be able to run models to predict temp/rain/wind changes.\nHere, we plan to use ARIMA forecasting methods. The user will be able to choose from a selection of parameters before running the model.\n\n\n\n\n\nFinally, we will include a tab for CDA to validate our results."
  },
  {
    "objectID": "Proposal/Proposal.html#exploratory-data-analysis-eda",
    "href": "Proposal/Proposal.html#exploratory-data-analysis-eda",
    "title": "Project Proposal",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nAs a standard procedure of a data analytics project, EDA will be performed to understand the trend and patterns in the data before developing our forecast models.\n\nUnderstanding the weather time series data (rainfall, temperature, relative humidity and wind) by decomposing them to study their trend, seasonality and stationarity.\nGeographical analysis to study the differences of weather by region and planning area in Singapore.\nCorrelation analysis to study the association among rainfall, temperature, relative humidity and wind.\nCorrelation analysis to study the association among rainfall, temperature and dengue cases."
  },
  {
    "objectID": "Proposal/Proposal.html#forecast-model-development",
    "href": "Proposal/Proposal.html#forecast-model-development",
    "title": "Project Proposal",
    "section": "Forecast Model Development",
    "text": "Forecast Model Development\nDifferent time series forecast models will be attempted to compare their performance, which are:\n\nSimple moving average method which is a part of the simple time series forecast model family. It will act as the reference model to be compared with more advanced models.\nHolt Winter’s method which employs exponential smoothing techniques that applies a higher weightage to the more recent data. The underlying assumption here is that the weather in the recent years would be more valuable in forecasting the future weather.\nSeasonal auto regressive integrated moving average (SARIMA) which extends auto regressive integrated moving average (ARIMA) methods by adding the seasonality component. The underlying assumption here is that weather exhibits seasonality trend. Thus, SARIMA method would be more suitable for weather forecasting."
  },
  {
    "objectID": "Proposal/Proposal.html#confirmatory-data-analysis-cda",
    "href": "Proposal/Proposal.html#confirmatory-data-analysis-cda",
    "title": "Project Proposal",
    "section": "Confirmatory Data Analysis (CDA)",
    "text": "Confirmatory Data Analysis (CDA)\nTo evaluate the models’ performance and identify the champion model after developing the above-mentioned models, we’ll use the following two commonly used performance metrics:\n\nRoot mean squared error (RMSE) which is the square root of mean squared error (MSE). It measures how far the forecasted values are deviated from the actual measurements.\n\nMean absolute percentage error (MAPE) which measures the percentage error against the actual measurements. It’s largely adopted because it’s normalized in percentage form, which many people find it easier to interpret and compare among different methods."
  },
  {
    "objectID": "Prototype/forecast.html",
    "href": "Prototype/forecast.html",
    "title": "Dengue Forecast in Singapore",
    "section": "",
    "text": "pacman::p_load(\n  tidyverse,\n  fable,\n  tsibble,\n  feasts,\n  patchwork,\n  plotly\n)"
  },
  {
    "objectID": "Prototype/forecast.html#arima",
    "href": "Prototype/forecast.html#arima",
    "title": "Dengue Forecast in Singapore",
    "section": "ARIMA",
    "text": "ARIMA\n\nData Preparation\n\narima_ts &lt;-  df %&gt;% dplyr::select(Date, Cases)\narima_tbl &lt;- arima_ts %&gt;% as_tsibble(index = Date) %&gt;% fill_gaps(.full = TRUE) %&gt;% fill(Cases)\n\n\n\nModel\n\narima_mdl &lt;- arima_tbl %&gt;% \n  model(ARIMA(Cases))\n\n\narima_mdl %&gt;% gg_tsresiduals()\n\n\n\n\n\n\nAutocorrelation\n\narima_tbl %&gt;% gg_tsdisplay(difference(Cases,1), plot_type = 'partial')\n\n\n\n\n\n\nActual vs Predicted\n\narima_fitted &lt;- fitted(arima_mdl)[,2:3] %&gt;% \n  as_tibble() %&gt;% \n  rename(Cases=.fitted)\n\narima_fitted$Type &lt;- \"Fit\"\n\narima_tbl$Type &lt;- \"Observed\"\n\narima_avp &lt;- dplyr::bind_rows(arima_fitted, arima_tbl)\n\nggplotly(\n  ggplot(data = arima_avp) +\n    geom_line(aes(x = Date, y = Cases, colour = Type)) +\n    ggtitle(\"Observed vs Fitted\")\n)\n\n\n\n\n\n\n\nModel Metrics\n\narima_cv &lt;- arima_tbl %&gt;%\n  stretch_tsibble(.init = 200, .step = 10) \n\n\narima_cv_metrics &lt;- arima_cv %&gt;%\n  model(ARIMA(Cases)) %&gt;%\n  forecast(h = 1) %&gt;%\n  accuracy(arima_tbl)\n\n\narima_train_metrics &lt;- arima_mdl %&gt;%\n  accuracy()\n\n\narima_cv_metrics[c(\"RMSE\",\"MAE\",\"MAPE\")]\n\n# A tibble: 1 × 3\n   RMSE   MAE  MAPE\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  55.1  36.7  16.9\n\n\n\n\nForecast\n\narima_mdl %&gt;%\n  forecast(h = 26) %&gt;%\n  autoplot(arima_tbl)\n\n\n\n\n\nresults &lt;- arima_mdl %&gt;%\n  forecast(h = 26)\n\nresults &lt;- results[-c(1,3)]\ncolnames(results) &lt;- c(\"Date\", \"Forecast\")\n\nresults\n\n# A tsibble: 26 x 2 [7D]\n   Date       Forecast\n   &lt;date&gt;        &lt;dbl&gt;\n 1 2020-11-30     259.\n 2 2020-12-07     246.\n 3 2020-12-14     253.\n 4 2020-12-21     270.\n 5 2020-12-28     296.\n 6 2021-01-04     330.\n 7 2021-01-11     368.\n 8 2021-01-18     409.\n 9 2021-01-25     451.\n10 2021-02-01     492.\n# ℹ 16 more rows"
  },
  {
    "objectID": "Prototype/forecast.html#exponential-smoothing",
    "href": "Prototype/forecast.html#exponential-smoothing",
    "title": "Dengue Forecast in Singapore",
    "section": "Exponential Smoothing",
    "text": "Exponential Smoothing\n\nData Preparation\n\nets_ts &lt;-  df %&gt;% dplyr::select(Date, Cases)\nets_tbl &lt;- ets_ts %&gt;% as_tsibble(index = Date) %&gt;% fill_gaps(.full = TRUE) %&gt;% fill(Cases)\n\n\n\nModel\n\nets_mdl &lt;- ets_tbl %&gt;%\n  model(ETS(Cases))\n\nreport(ets_mdl)\n\nSeries: Cases \nModel: ETS(M,A,N) \n  Smoothing parameters:\n    alpha = 0.8295143 \n    beta  = 0.0001000111 \n\n  Initial states:\n     l[0]     b[0]\n 766.3457 2.816859\n\n  sigma^2:  0.0363\n\n     AIC     AICc      BIC \n5212.341 5212.496 5232.210 \n\n\n\n\nDecomposition\n\ncomponents(ets_mdl) %&gt;%\n  autoplot() +\n  labs(title = \"Exponential Smoothing Components\")\n\n\n\n\n\n\nActual vs Predicted\n\nets_fitted &lt;- fitted(ets_mdl)[,2:3] %&gt;% \n  as_tibble() %&gt;% \n  rename(Cases=.fitted)\n\nets_fitted$Type &lt;- \"Fit\"\n\nets_tbl$Type &lt;- \"Observed\"\n\nets_avp &lt;- dplyr::bind_rows(ets_fitted, ets_tbl)\n\nggplotly(\n  ggplot(data = ets_avp) +\n    geom_line(aes(x = Date, y = Cases, colour = Type)) +\n    ggtitle(\"Observed vs Fitted\")\n)\n\n\n\n\n\n\n\nModel Metrics\n\nets_cv &lt;- ets_tbl %&gt;%\n  stretch_tsibble(.init = 200, .step = 10) \n\n\nets_cv_metrics &lt;- ets_cv %&gt;%\n  model(ARIMA(Cases)) %&gt;%\n  forecast(h = 1) %&gt;%\n  accuracy(ets_tbl)\n\n\nets_train_metrics &lt;- ets_mdl %&gt;%\n  accuracy()\n\n\nets_cv_metrics$MAPE\n\n[1] 16.91571"
  },
  {
    "objectID": "Prototype/forecast.html#var",
    "href": "Prototype/forecast.html#var",
    "title": "Dengue Forecast in Singapore",
    "section": "VAR",
    "text": "VAR\n\nData Preparation\n\nvar_ts &lt;-  df %&gt;% dplyr::select(-c(\"Year\", \"WkNo\"))\nvar_tbl &lt;- var_ts %&gt;% as_tsibble(index = Date) %&gt;% fill_gaps(.full = TRUE) %&gt;% fill(colnames(var_ts))\n\n\n\nModel\n\nvar_mdl &lt;- var_tbl %&gt;%\n  model(\n    aicc = VAR(vars(Cases, avg_mean_temp, avg_daily_rainfall)),\n    bic = VAR(vars(Cases, avg_mean_temp, avg_daily_rainfall), ic=\"bic\")\n  )\n\n\ni &lt;- c(\"avg_mean_temp\", \"avg_daily_rainfall\")\n\n\nv &lt;- \"Cases\"\nmode &lt;- '\"aicc\"'\n\nfor (s in i) {\n  v &lt;- paste0(v,\",\",s)\n}\n\nstrr &lt;- paste0('var_tbl %&gt;% model(',mode,' = VAR(vars(',v,'), ic=',mode,'))')\n\nvar_mdl &lt;- eval(parse(text = strr))\n\n\n\nAutocorrelation\n\nvar_mdl |&gt;\n  augment() |&gt;\n  ACF() |&gt;\n  autoplot()\n\n\n\n\n\n\nActual vs Predicted\n\n\nModel Metrics"
  },
  {
    "objectID": "Shinyapp/app/data/geospatial/MPSZ-2019.html",
    "href": "Shinyapp/app/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608-VAA_Project",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false    \n\n\n\n Back to top"
  },
  {
    "objectID": "Prototype/Take-home_Ex04_2014_ts-regression.html",
    "href": "Prototype/Take-home_Ex04_2014_ts-regression.html",
    "title": "Take-home_Ex04_ts-regression",
    "section": "",
    "text": "pacman::p_load(tidyverse, tsibbledata, fable, feasts, tsibble, ggstatsplot, performance)\n\n\ndf &lt;- read_csv(\"data/dengue_climate_joined_by_week_transformed_diff.csv\")\n\nRows: 359 Columns: 927\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (926): Year, WkNo, Cases, avg_rainfall, tot_rainfall, max_30m_rainfall,...\ndate   (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataframe needs to be converted to a tsibble object before running TSLM model.\n\n# Convert the tibble dataframe to a tsibble dataframe\ntslm_ts &lt;-  df %&gt;% dplyr::select(-c(\"Year\", \"WkNo\"))\ntslm_tbl &lt;- tslm_ts %&gt;% as_tsibble(index = Date) %&gt;% fill_gaps(.full = TRUE) %&gt;% fill(colnames(tslm_ts))\ntslm_slice &lt;- tslm_tbl\n\n\ntslm_mdl &lt;- tslm_slice %&gt;%\n  model(TSLM(log_Cases ~ log_tot_rainfall +\n                  log_avg_temp + \n                  log_max_temp +\n                  log_min_temp +\n                  log_avg_wind +\n                  log_max_wind))\n\nreport(tslm_mdl)\n\nSeries: log_Cases \nModel: TSLM \n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9871 -0.7553  0.1395  0.6133  2.3336 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -16.35874    7.72829  -2.117 0.034982 *  \nlog_tot_rainfall   0.11427    0.06095   1.875 0.061632 .  \nlog_avg_temp       8.84930    2.16742   4.083 5.51e-05 ***\nlog_max_temp      -3.42275    2.39728  -1.428 0.154244    \nlog_min_temp       0.10393    0.16670   0.623 0.533363    \nlog_avg_wind       1.25481    0.34959   3.589 0.000378 ***\nlog_max_wind       0.10687    0.22837   0.468 0.640086    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9111 on 353 degrees of freedom\nMultiple R-squared: 0.07936,    Adjusted R-squared: 0.06371\nF-statistic: 5.071 on 6 and 353 DF, p-value: 5.2194e-05\n\n\n\nv = \"log_Cases\"\nj = \"log_tot_rainfall + log_avg_temp + log_avg_wind\"\ntslm_mdl &lt;- tslm_slice %&gt;%\n          model(TSLM(as.formula(paste0(v,\" ~ \",j))))\n\nreport(tslm_mdl)\n\nSeries: log_Cases \nModel: TSLM \n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9058 -0.7821  0.1179  0.6230  2.3016 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -22.43517    6.26405  -3.582 0.000389 ***\nlog_tot_rainfall   0.12131    0.05869   2.067 0.039468 *  \nlog_avg_temp       7.19398    1.77473   4.054  6.2e-05 ***\nlog_avg_wind       1.33460    0.34523   3.866 0.000132 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9105 on 356 degrees of freedom\nMultiple R-squared: 0.0727, Adjusted R-squared: 0.06489\nF-statistic: 9.304 on 3 and 356 DF, p-value: 6.151e-06\n\n\n\ntslm_mdl %&gt;%\n  accuracy()\n\n# A tibble: 1 × 10\n  .model               .type        ME  RMSE   MAE   MPE  MAPE  MASE RMSSE  ACF1\n  &lt;chr&gt;                &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 \"TSLM(as.formula(pa… Trai… -1.34e-16 0.905 0.749 -3.30  15.4  4.67  4.48 0.942\n\n\n\ntslm_mdl |&gt;\n  augment() |&gt;\n  ACF() |&gt;\n  autoplot()\n\nResponse variable not specified, automatically selected `var = log_Cases`\n\n\n\n\n\n\ngg_tsresiduals(tslm_mdl)\n\n\n\n\n\naugment(tslm_mdl) %&gt;%\n  ggplot(aes(x = .fitted, y = .resid)) +\n  geom_point() +\n  labs(title = \"Relationship between residuals and fitted values.\",\n       subtitle = \"if a relationship exists, then response variable may require transformation.\",\n       y = \"Residuals\", x = \"Fitted\") +\n  theme_light()\n\n\n\n\n\nggcoefstats(tslm_mdl %&gt;% tidy(), \n            output = \"plot\")\n\n\n\n\n\ntslm_mdl %&gt;% tidy()\n\n# A tibble: 4 × 6\n  .model                              term  estimate std.error statistic p.value\n  &lt;chr&gt;                               &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 \"TSLM(as.formula(paste0(v, \\\" ~ \\\"… (Int…  -22.4      6.26       -3.58 3.89e-4\n2 \"TSLM(as.formula(paste0(v, \\\" ~ \\\"… log_…    0.121    0.0587      2.07 3.95e-2\n3 \"TSLM(as.formula(paste0(v, \\\" ~ \\\"… log_…    7.19     1.77        4.05 6.20e-5\n4 \"TSLM(as.formula(paste0(v, \\\" ~ \\\"… log_…    1.33     0.345       3.87 1.32e-4\n\n\n\nvar_fitted &lt;- fitted(tslm_mdl)[,2:3] %&gt;% \n  as_tibble() #%&gt;% \n  #rename(Cases=.fitted)\n\nvar_fitted$Type &lt;- \"Fit\"\n\ntslm_slice$Type &lt;- \"Observed\"\n\nvar_avp &lt;- dplyr::bind_rows(var_fitted, tslm_slice)\n\n\nggplot(data = var_avp) +\n  geom_line(aes(x = Date, y = Cases, colour = Type)) +\n  ggtitle(\"Observed vs Fitted\")\n\nWarning: Removed 360 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Meeting_Minute/Meeting_Minute.html#meeting-01",
    "href": "Meeting_Minute/Meeting_Minute.html#meeting-01",
    "title": "Project Meeting Minutes",
    "section": "2024-02-07 Meeting 01",
    "text": "2024-02-07 Meeting 01\nDate: 07 Feb 2024, 7:30pm\nPresent:\n\nColin\nYiping\nCi Hui\n\nAbsent:\n\nNone\n\n\nAgenda\n\nDiscuss project idea\nRoles allocation\nDetermine timeline\n\n\n\nProject Idea\nColin and Yiping suggested going with weather data provided by Prof Kam earlier in class. Below are some of the aspects that can be explored with that dataset.\nSingapore Climate\nData: Meteorological Service Singapore daily weather data\nEDA:\n\nVisualize changes in weather conditions in Singapore over past few years.\nVisualize factors contributing to climate change (need more data for other sources)\nVisualize impacts of climate change (need more data for other sources)\n\nRshiny:\n\nForecast temperature/rainfall with time-series analysis\nPredict temperature using attribution modelling or other machine learning techniques like random forest/gradient boosting\n\nHDB Pricing\nData: HDB, Singstats\nEDA:\n\nVisualize historical patterns in HDB prices\nVisualize differences in prices by region and time\n\nRshiny:\n\nPredict prices of HDB given some known factors\n\nAll 3 agreed to go with weather data for our project. The actual scope will be decided in later meetings. We will start the following 2 in proposal and add/remove after consult with prof.\nEDA: Visualize changes in weather conditions in Singapore over past few years by region and time\nRshiny: Forecast temperature/rainfall with time-series analysis\n\n\nRoles Allocation\nColin will start early with web layout. More time is needed here as we are all beginners at html/css/js. Also will create git repo and host on Netlify.\nCi Hui and Yiping will work on drafting the proposal for submission on 11 Feb. We aim to finish by 9th Feb so that we can enjoy our CNY break.\nProposal will be shared in teams shared folder where multiple users can edit the .doc at the same time instead of editing in .qmd which requires multiple branching, pulling and pushing on Git. Once done, it will be copied over to a .qmd file by colin who will push the final proposal to origin.\n\n\nTimeline\nWe discussed about the timeline using an excel sheet. Here is the final screenshot:\n\n\n\n\n\n\n\nAgenda for next meeting\n\nFinalize project idea (should be after prof consult)\nModels to deploy on Shiny App (by now, we should all have finish Shiny app tutorials)\nWebsite layout improvements\n\n\n\nAdjournment\nMeeting ended at 8:10pm. Next meeting on 13th February, 8:00pm (Tentative) online."
  },
  {
    "objectID": "Meeting_Minute/Meeting_Minute.html#meeting-02",
    "href": "Meeting_Minute/Meeting_Minute.html#meeting-02",
    "title": "Project Meeting Minutes",
    "section": "2024-02-20 Meeting 02",
    "text": "2024-02-20 Meeting 02\nDate: 20 Feb 2024, 11:00am\nPresent:\n\nColin\nYiping\nProf Kam\n\nAbsent:\n\nCi Hui\n\n\nAgenda\n\nFinalize project idea (should be after prof consult)\nFeedback on proposal\nOther advice\n\n\n\nFinalize Project Ideas\nWe decided to go with the visualization of Singapore’s weather on Dengue cases.\nTime Series Econometric model\n\nProf has approved our approach to use time series econometric model to forecast the future temperature. In the real-world application, the researchers would also use satellite image data to forecast the future weather. However, this requires additional data and specific knowledge to interpret the satellite images. Hence, we’ll keep the project scope simple by just using the data downloaded from the website.\nMeanwhile, prof has reminded us to check the data source carefully before downloading.\n\nCorrelation Study between Weather and Dengue Cases\n\nAs dengue clusters are often isolated to regions with outbreaks, Prof had advised that we look at dengue cases on a national and weekly level. Climate data used will hence also be at the national level, aggregated across all regions in Singapore.\nIn addition, prof suggested that we can use an explanatory model to study the impact of temperature and rainfall on dengue cases. For example, would dengue cases increase when rainfall increases?\n\n\n\nFeedback on Proposal\nCDA\n\nOur idea of CDA in the proposal is incorrect. MAPE and RMSE are measures to check accuracy of model, and are not what CDA is about.\n\nDashboard in ShinyApp\n\nThis is not the focus of the ShinyApp. ShinyApp should focus more on Applications.\n\n\n\nOther advice\n\nProf also shared another potential project idea which is to calibrate a model to interpolate the rainfall at the area without rainfall station. There are a total of 27 rainfall stations in Singapore, but it’s challenging to predict the rainfall at the area outside the rainfall station’s coverage.\nHowever, this requires the knowledge of geospatial interpolation. Hence, we’ll not go into this area for this project\n\n\n\nAgenda for next meeting\n\nData preparations\nModel finalization\n\n\n\nAdjournment\nMeeting ended at 11:40am. Next meeting on 24th February, 4:00pm (Tentative) after class."
  },
  {
    "objectID": "Meeting_Minute/Meeting_Minute.html#meeting-03",
    "href": "Meeting_Minute/Meeting_Minute.html#meeting-03",
    "title": "Project Meeting Minutes",
    "section": "2024-03-09 Meeting 03",
    "text": "2024-03-09 Meeting 03\nDate: 9 Mar 2024, 3:40pm\nPresent:\n\nColin\nYiping\nCi Hui\n\nAbsent:\n\nNone\n\n\nAgenda\n\nShiny App modules\n\n\n\nShiny App Modules\nModules has been decided and split among us via whatsapp. This lists the final details of the modules we are working on as part of Take-home_Ex04.\nEDA\n\nCi Hui will be working on EDA\nEDA will consist of both climate and dengue data\nEDA will allow users to view distribution of data, and compare across years and stations\n\nExplanatory Model\n\nYi Ping will be working on the Explanatory model\nModel will be linear regression, with dengue cases as the explained variable, and climate as the explanatory variables\nUsers can decide which variables to include in the model\nResults will show model metrics such as accuracy, as well as variable importance\n\nTime series forecast\n\nColin will be working on the time series forecast\nModel will be Holt Winters\nUsers will be able to choose which climate variable to forecast, and from which whether station. In addition, users will be able to define the time range, train-test split, as well as other tuning parameters\nResults will show forecasted values in a plot, with confidence interval\n\n\n\nAgenda for next meeting\n\nShiny App progress\nWebsite progress\nBegin Poster discussions\n\n\n\nAdjournment\nMeeting ended at 4:30am. Next meeting on 16th March, 3:30pm (Tentative) after class."
  },
  {
    "objectID": "Meeting_Minute/Meeting_Minute.html#meeting-04",
    "href": "Meeting_Minute/Meeting_Minute.html#meeting-04",
    "title": "Project Meeting Minutes",
    "section": "2024-03-16 Meeting 04",
    "text": "2024-03-16 Meeting 04\nDate: 16 Mar 2024, 3:50pm\nPresent:\n\nColin\nYiping\nCi Hui\n\nAbsent:\n\nNone\n\n\nAgenda\n\nShiny App modules\nProject poster\n\n\n\nShiny App Modules\nModules has been decided and split among us via whatsapp. This lists the final details of the modules we are working on for the group Shiny app.\nEDA\n\nCi Hui has made some plots to discover the trends in the weather data such as cycle plots and geospacial graphs\nMore charts will be added to review the relation between weather data and dengue data\n\nFeature Selection\nCorrelation study\n\nCi Hui shared the correlation matrix she made for the weather data\nCorrelation between weather and dengue cases will be added\n\nExplanatory Model\n\nYi Ping shared that the explanatory model has been calibrated, but the adjusted R^2 is low (~ 3%) which indicates that weather data alone is not enough to explain the dengue cases\nTransformation did help to bring the adjusted R^2 from ~2% to ~3%\nUsers will be able to choose which transformation they want to apply, i.e. log transformation, min-max transformation and standardization\nYi Ping will plot the variable coefficients in a graph so the users can view them visually\n\nTime series forecast\n\nColin will be working on a multivariate forecast model, using the forecasted weather data to predict the dengue cases\nThe timeseries packages shared by prof in class is very helpful, and Colin will update the codes using those recommended packages and graphs\n\nCi Hui and Yi Ping will share the data sets and codes with Colin to test the Shiny app.\n\n\nProject Poster\nWe will start to work on the poster by referencing to the work from the course seniors. The content written for the sections (i.e. introduction, methodology, tools) can be also displayed in the Shiny app.\n\n\nAgenda for next meeting\n\nShiny App progress\nPoster draft design\n\n\n\nAdjournment\nMeeting ended at 4:30pm. Next meeting on 23rd March, 3:30pm (Tentative) after class."
  },
  {
    "objectID": "Meeting_Minute/Meeting_Minute.html#meeting-05",
    "href": "Meeting_Minute/Meeting_Minute.html#meeting-05",
    "title": "Project Meeting Minutes",
    "section": "2024-03-23 Meeting 05",
    "text": "2024-03-23 Meeting 05\nDate: 23 Mar 2024, 3:40pm\nPresent:\n\nColin\nYiping\nProf Kam\n\nAbsent:\n\nCi Hui\n\n\nAgenda"
  },
  {
    "objectID": "Meeting_Minute/Meeting_Minute.html",
    "href": "Meeting_Minute/Meeting_Minute.html",
    "title": "Project Meeting Minutes",
    "section": "",
    "text": "This document records the minutes of our project meetings.\nProject Member:"
  },
  {
    "objectID": "Prototype/Prototype.html",
    "href": "Prototype/Prototype.html",
    "title": "Prototype",
    "section": "",
    "text": "Sorry! Still Work in Progress\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "User_Manual/User_Manual.html",
    "href": "User_Manual/User_Manual.html",
    "title": "User Manual",
    "section": "",
    "text": "Click here to access R Shiny User Manual\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Project_prototype/eda.html",
    "href": "Project_prototype/eda.html",
    "title": "EDA",
    "section": "",
    "text": "1 Installing and launching the required R packages\n\npacman::p_load(tidyverse, ggstatsplot, sf, terra, gstat, tmap, rstantools)\n\n\n\n2 Importing the data\n\nclimate_data &lt;- read_csv(\"data/clean_climate_data.csv\")\n\nRows: 111434 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Station\ndbl (12): Year, Month, Day, daily_rainfall, highest_30m_rainfall, highest_60...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nstationList &lt;- unique(climate_data$Station)\n\n\n\n3 Oneway ANOVA Test\n\n#Inputs for prototyping\ninput_station &lt;- \"Changi\"\ninput_msmt &lt;- \"mean_temp\"\nstart_year &lt;- 2018\nend_year &lt;- 2020\ninput_year &lt;- seq(start_year, end_year)\n\ninput_data &lt;- climate_data %&gt;%\n  select('Station','Year','Month','Day',input_msmt)%&gt;%\n  filter(Station == input_station,\n         Year %in% input_year)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(input_msmt)\n\n  # Now:\n  data %&gt;% select(all_of(input_msmt))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nggbetweenstats(\n  data = input_data,\n  x = Year, \n  y = !!rlang::sym(input_msmt),\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\nWarning in min(x): no non-missing arguments to min; returning Inf\n\n\nWarning in max(x): no non-missing arguments to max; returning -Inf\n\n\n\n\n\nThe UI\n\n\n\n4 Spatial Interpolation\n\n#Importing the station data\nstations &lt;- read_csv(\"data/aspatial/RainfallStation.csv\")\n\nRows: 63 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Station\ndbl (2): Latitude, Longitude\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Inputs for prototyping\ninput_year &lt;- 2023\ninput_msmt &lt;- \"daily_rainfall\"\ninput_agg &lt;- \"sum\"\n\n#Preparing the input data\ninput_data &lt;- climate_data %&gt;%\n  select('Station','Year','Month','Day',input_msmt)%&gt;%\n  filter(Year == input_year)\n\nrfdata &lt;- input_data%&gt;%\n  select(c(1,5))%&gt;%\n  group_by(Station)%&gt;%\n  summarise(year_agg = switch(input_agg,\n                              sum = sum(!!rlang::sym(input_msmt)),\n                              mean = mean(!!rlang::sym(input_msmt))\n                              ))%&gt;%\n  mutate(\n    year_agg = ifelse(is.na(year_agg), 0, year_agg)\n  )%&gt;%\n  ungroup()\n\n#Converting aspatial data into geospatial data\nrfdata &lt;- rfdata %&gt;%\n  left_join(stations)\n\nJoining with `by = join_by(Station)`\n\nrfdata_sf&lt;- st_as_sf(rfdata,\n                     coords = c(\"Longitude\", \"Latitude\"),\n                     crs = 4326)%&gt;%\n  st_transform(crs = 3414)\n\n#Importing planning subzone boundary data\nmpsz2019 &lt;- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\")%&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `D:\\MITB_SunYP\\ISSS608-VAA_Project\\Project_prototype\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nInverse Distance Weighted\n\n#Inputs for prototyping\ninput_nmax &lt;- 3\n\nreso &lt;- 200\nnr &lt;- reso\nnc &lt;- reso * 1.557971\n\ngrid &lt;- terra::rast(mpsz2019, \n                    nrows = nr, \n                    ncols = nc)\n\nxy &lt;- terra::xyFromCell(grid, \n                        1:ncell(grid))\n\ncoop &lt;- st_as_sf(as.data.frame(xy), \n                 coords = c(\"x\", \"y\"),\n                 crs = st_crs(mpsz2019))\ncoop &lt;- st_filter(coop, mpsz2019)\n\nres &lt;- gstat(formula = year_agg ~ 1, \n             locations = rfdata_sf, \n             nmax = input_nmax,\n             set = list(idp = 0))\n\nresp &lt;- predict(res, coop)\n\n[inverse distance weighted interpolation]\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\n\npred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(pred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\nKriging\n\nv &lt;- variogram(year_agg ~ 1, \n               data = rfdata_sf)\nplot(v)\n\n\n\n\n\n#Inputs for prototyping\ninput_model &lt;- \"Sph\"\ninput_psill &lt;- 0.5\ninput_range &lt;- 5000\ninput_nugget &lt;- 0.1\n\nfv &lt;- fit.variogram(object = v,\n                    model = vgm(\n                      psill = input_psill, \n                      model = input_model,\n                      range = input_range,  \n                      nugget = input_nugget))\n\nWarning in fit.variogram(object = v, model = vgm(psill = input_psill, model =\ninput_model, : No convergence after 200 iterations: try different initial\nvalues?\n\nk &lt;- gstat(formula = year_agg ~ 1, \n           data = rfdata_sf, \n           model = fv)\n\nresp &lt;- predict(k, coop)\n\n[using ordinary kriging]\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\nresp$pred &lt;- resp$pred\n\nkpred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(kpred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\",\n            title = \"Total yearly rainfall (mm)\") +\n  tm_layout(main.title = \"Distribution of yearly rainfall\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\nThe UI\nThe user select all required values from the first panel and click on the button. If IDW is selected, the user can change the model parameter nmax value to generate different surface map. If Kriging is selected, a empirical variogram will be shown, and the user can decide the model parameters - psill, model, range, nugget according to the variogram shown.\n\n\n\n\n5 Correlation\n\n#Inputs for prototyping\ninput1 &lt;- \"mean_temp\"\ninput2 &lt;- \"daily_rainfall\"\ninput3 &lt;- \"mean_wind\"\n\ncor_data &lt;- climate_data %&gt;%\n  select(input1, input2, input3)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(input1)\n\n  # Now:\n  data %&gt;% select(all_of(input1))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(input2)\n\n  # Now:\n  data %&gt;% select(all_of(input2))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(input3)\n\n  # Now:\n  data %&gt;% select(all_of(input3))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\ncor_data &lt;- na.omit(cor_data)\n\nggstatsplot::ggcorrmat(\n  data = cor_data, \n  cor.vars = 1:ncol(cor_data))\n\n\n\n\nThe UI\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Prototype/regression.html",
    "href": "Prototype/regression.html",
    "title": "regression",
    "section": "",
    "text": "pacman::p_load(\n  tidyverse,\n  fable,\n  tsibble,\n  feasts,\n  patchwork,\n  plotly,\n  lubridate,\n  # caret,\n  performance,\n  ggstatsplot,\n  qqplotr\n)\n\n\ndf &lt;- read_csv(\"data/dengue_climate_joined_by_week_transformed_diff.csv\")\n\nRows: 359 Columns: 927\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (926): Year, WkNo, Cases, avg_rainfall, tot_rainfall, max_30m_rainfall,...\ndate   (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmdl &lt;- lm(Cases ~ avg_temp, data = df)\n\n\nModel Construct\n\ni &lt;- c(\"avg_temp\",\"tot_rainfall\",\"avg_wind\")\nj &lt;- \"\"\nfor (v in i) {\n  if (j == \"\") {\n    j &lt;- v\n  } else {\n    j &lt;- paste0(j,\"+\",v)\n  }\n}\n\nmdl &lt;- lm(as.formula(paste0(\"Cases ~ \",j)), data=df)\n\n\nlength(c())\n\n[1] 0\n\n\n\nsummary(mdl)\n\n\nCall:\nlm(formula = as.formula(paste0(\"Cases ~ \", j)), data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-360.77 -166.33  -71.29   67.18 1497.88 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  -2373.5890   647.8730  -3.664 0.000287 ***\navg_temp        79.4251    21.2559   3.737 0.000217 ***\ntot_rainfall     2.0540     0.6625   3.100 0.002087 ** \navg_wind        39.2656    10.2478   3.832 0.000151 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 278.9 on 355 degrees of freedom\nMultiple R-squared:  0.05728,   Adjusted R-squared:  0.04931 \nF-statistic:  7.19 on 3 and 355 DF,  p-value: 0.0001068\n\n\n\nmdl$fitted.values %&gt;% as.data.frame()\n\n           .\n1   124.5753\n2   144.1134\n3   211.3516\n4   161.3092\n5   188.5846\n6   125.5801\n7   294.3640\n8   313.8001\n9   274.3983\n10  233.0027\n11  323.1069\n12  198.9948\n13  237.1211\n14  220.6809\n15  146.7623\n16  211.4701\n17  178.0804\n18  223.5709\n19  236.4119\n20  304.1245\n21  211.2048\n22  241.2424\n23  260.9525\n24  287.6055\n25  366.5351\n26  262.2014\n27  233.6776\n28  311.4321\n29  287.6125\n30  381.2172\n31  298.0921\n32  229.1933\n33  191.4790\n34  212.8514\n35  180.1469\n36  224.7602\n37  263.2224\n38  309.6134\n39  282.8619\n40  264.8624\n41  238.5977\n42  176.7570\n43  159.1703\n44  212.4116\n45  298.6439\n46  142.3159\n47  109.7864\n48  196.7357\n49  218.3129\n50  247.8718\n51  242.5869\n52  170.4631\n53  169.9500\n54  169.3212\n55  287.8185\n56  257.0788\n57  207.1168\n58  191.8064\n59  331.3284\n60  273.4365\n61  261.8701\n62  217.5935\n63  251.3578\n64  245.9908\n65  312.0859\n66  206.5131\n67  245.0623\n68  296.0056\n69  225.6308\n70  266.7968\n71  250.7781\n72  273.8941\n73  267.4080\n74  286.8207\n75  234.8519\n76  198.6392\n77  266.3031\n78  399.5743\n79  324.5151\n80  333.5021\n81  396.8540\n82  320.5261\n83  243.4994\n84  308.7794\n85  275.9424\n86  301.6782\n87  321.7883\n88  340.0221\n89  251.7562\n90  273.6883\n91  227.4859\n92  252.1517\n93  196.9798\n94  243.2473\n95  278.7845\n96  185.1880\n97  153.1002\n98  145.7156\n99  205.9761\n100 213.1796\n101 300.7044\n102 287.7771\n103 169.0919\n104 266.2929\n105 276.2820\n106 262.1218\n107 283.7840\n108 314.4200\n109 356.4461\n110 241.7147\n111 392.8225\n112 350.0937\n113 382.2980\n114 311.7855\n115 261.2214\n116 295.9942\n117 377.8226\n118 295.2882\n119 317.6385\n120 348.3606\n121 250.1028\n122 277.4559\n123 298.9684\n124 361.5958\n125 331.0861\n126 183.5878\n127 267.9347\n128 297.9802\n129 266.8329\n130 332.7769\n131 375.4285\n132 251.1527\n133 298.8374\n134 201.5961\n135 277.5026\n136 303.3255\n137 409.1668\n138 359.8193\n139 208.1244\n140 287.4113\n141 308.4769\n142 290.8914\n143 259.8967\n144 294.6674\n145 410.8100\n146 281.0352\n147 214.1411\n148 248.7841\n149 191.9339\n150 243.9013\n151 253.6132\n152 165.0883\n153 237.4050\n154 250.0302\n155 366.0759\n156 135.2948\n157 185.6442\n158 224.7612\n159 273.2359\n160 262.8553\n161 198.6750\n162 274.0993\n163 272.6697\n164 207.2685\n165 256.0370\n166 207.8673\n167 189.3009\n168 225.3297\n169 137.8515\n170 240.6254\n171 243.8252\n172 314.1940\n173 246.7159\n174 235.7620\n175 254.9860\n176 353.8769\n177 352.0616\n178 381.9407\n179 352.6884\n180 312.9879\n181 220.7376\n182 187.4704\n183 257.7271\n184 315.3257\n185 311.5113\n186 383.2883\n187 401.2584\n188 198.6286\n189 287.8841\n190 257.8966\n191 237.1550\n192 230.0837\n193 256.9020\n194 216.2003\n195 181.7901\n196 176.0707\n197 288.1306\n198 267.7920\n199 147.6809\n200 164.3120\n201 284.0345\n202 260.8530\n203 152.8082\n204 212.4352\n205 179.3925\n206 299.2541\n207 283.3694\n208 345.6798\n209 190.3594\n210 207.4596\n211 142.8230\n212 218.0454\n213 289.6924\n214 247.3627\n215 232.5214\n216 247.8194\n217 279.8787\n218 293.1200\n219 275.5577\n220 269.6488\n221 178.7908\n222 303.8881\n223 306.7277\n224 248.1487\n225 262.3815\n226 257.5749\n227 351.2844\n228 263.5014\n229 255.3850\n230 291.8425\n231 337.4823\n232 305.8855\n233 237.8033\n234 259.6099\n235 256.7822\n236 292.9460\n237 328.4181\n238 310.7404\n239 217.3654\n240 276.3721\n241 403.7745\n242 309.2953\n243 225.4844\n244 267.9040\n245 220.2368\n246 251.5605\n247 309.1773\n248 314.9768\n249 268.0369\n250 178.7634\n251 189.4000\n252 146.2994\n253 237.2959\n254 168.8983\n255 242.3302\n256 224.1042\n257 149.5090\n258 184.9968\n259 196.1928\n260 222.3390\n261 345.7224\n262 349.4655\n263 307.4280\n264 324.6813\n265 314.6600\n266 309.5287\n267 382.9324\n268 283.3004\n269 343.5378\n270 283.4682\n271 344.8163\n272 367.5088\n273 328.4305\n274 322.4249\n275 263.9015\n276 301.1500\n277 294.4996\n278 258.3295\n279 408.2615\n280 269.9929\n281 247.6293\n282 335.9601\n283 225.3042\n284 366.6693\n285 279.7540\n286 336.3738\n287 340.8268\n288 363.7625\n289 333.3693\n290 303.6873\n291 392.0762\n292 377.7306\n293 423.3340\n294 410.7656\n295 311.3337\n296 429.0717\n297 338.6094\n298 385.2119\n299 313.2433\n300 198.4166\n301 229.3592\n302 239.7464\n303 259.3455\n304 205.6963\n305 259.3926\n306 196.1254\n307 177.5543\n308 317.7270\n309 357.2423\n310 390.6889\n311 163.0982\n312 279.8525\n313 347.6063\n314 293.4003\n315 327.8629\n316 381.5710\n317 489.6271\n318 346.6011\n319 346.1567\n320 426.1813\n321 416.0022\n322 362.5811\n323 345.5217\n324 382.2791\n325 343.7593\n326 390.1308\n327 352.9075\n328 389.7292\n329 348.3216\n330 358.0786\n331 417.1391\n332 419.6263\n333 363.8137\n334 322.9453\n335 342.2870\n336 362.0860\n337 313.3291\n338 432.6056\n339 368.1962\n340 237.5429\n341 236.3896\n342 294.1228\n343 289.6611\n344 315.1980\n345 380.7719\n346 277.4033\n347 237.2948\n348 277.5703\n349 294.6056\n350 249.4496\n351 328.6594\n352 242.8559\n353 290.8578\n354 306.2913\n355 229.2763\n356 275.1713\n357 250.9619\n358 286.8710\n359 289.0703\n\n\n\n\nModel coeff plot\n\nggcoefstats(mdl, \n            output = \"plot\")\n\n\n\n\n\nggplot()\n\n\n\n\n\n\nModel Metrics\n\nmdl %&gt;% broom::tidy()\n\n# A tibble: 4 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  -2374.     648.        -3.66 0.000287\n2 avg_temp        79.4     21.3        3.74 0.000217\n3 tot_rainfall     2.05     0.663      3.10 0.00209 \n4 avg_wind        39.3     10.2        3.83 0.000151\n\n\n\nsumm &lt;- summary(mdl)\n\nsumm$adj.r.squared\n\n[1] 0.04931463\n\n\n\nsumm$fstatistic[[1]]\n\n[1] 7.190144\n\n\n\n\nAVP\n\ndf_a &lt;- data.frame(Date=df$Date, Cases=mdl$fitted.values, Type=\"Fitted\")\ndf_b &lt;- data.frame(Date=df$Date, Cases=df$Cases, Type=\"Observed\")\n\ndf_c &lt;- dplyr::bind_rows(df_a, df_b)\n\nggplot(data = df_c) +\n    geom_line(aes(x = Date, y = Cases, colour = Type)) +\n    ggtitle(\"Observed vs Fitted\")\n\n\n\n\n\n\nModel Diagnostics\n\nplots &lt;- plot(check_model(mdl, panel = FALSE))\n\n\nplots[[6]]\n\n\n\n\n\ndf_tbl &lt;- df %&gt;% as_tsibble(index = Date) %&gt;% fill_gaps(.full = TRUE) %&gt;% fill(Cases)\n\nlibrary(patchwork)\n\nfirst_var &lt;- TRUE\nfor (v in i) {\n  if (first_var == TRUE) {\n    p &lt;- eval(parse(text = paste0(\"df_tbl %&gt;% autoplot(\",v,\")\")))\n    first_var &lt;- FALSE\n  } else {\n    p &lt;- p / eval(parse(text = paste0(\"df_tbl %&gt;% autoplot(\",v,\")\")))\n  }\n}\n\np\n\n\n\n\n\np1 &lt;- df_tbl %&gt;% autoplot(Cases)\np2 &lt;- df_tbl %&gt;% autoplot(avg_temp)\n\n\np1 / p2\n\n\n\n\n\n\n\n\n Back to top"
  }
]